{
    "id": "fe1f6a25-52ca-4a7b-9ee1-35be8ff6dd30",
    "SKU": "000003",
    "interpreter": 1,
    "type": "MULT",
    "language": "NA",
    "knowledgeArea": "embedded",
    "category": "fundamentos de linguagem C",
    "subCategory": "ponteiros",
    "level": "Medium",
    "tagsOrConcepts": [
        "ponteiros"
    ],
    "text": [
        "Considere o trecho de código abaixo:",
        "`int v[] = {1, 3, 5, 7, 9};`",
        "`int *p = v;`",
        "`printf(\"%d\\n\", ((char*)p)[4]);`",
        "Sem conhecer a plataforma onde este código será compilado e executado, o que podemos afirmar sobre a saída produzida por ele?"
    ],
    "alternatives": [
        {
            "id": "a4f5cae6-fb19-481c-b2fc-fc0bc6048d70",
            "feedback": "Dependendo da plataforma, o tamanho do int poderia ser 1, 2, 4, 8, e assim por diante bytes. Char, por padrão, é 8 bits. Ao fazer casting do ponteiro para char e em seguida acessar a posição 4, estamos necessariamente pegando o quinto byte do vetor. Para um inteiro de 1 byte, isso implica em cair na posição ocupada pelo 9. 2 bytes, na posição ocupada pelo 5. 4 bytes, na posição ocupada pelo 3. 8 bytes, na posição ocupada pelo 1. Dependendo da plataforma ser little endian ou big endian, não necessariamente acessaremos o byte com o número em si - pode ser um byte apenas com zeros também.",
            "correct": false,
            "text": "Será necessariamente 9"
        },
        {
            "id": "bc015b6a-0f92-49c4-aed9-cc7fd03f3416",
            "feedback": "Dependendo da plataforma, o tamanho do int poderia ser 1, 2, 4, 8, e assim por diante bytes. Char, por padrão, é 8 bits. Ao fazer casting do ponteiro para char e em seguida acessar a posição 4, estamos necessariamente pegando o quinto byte do vetor. Para um inteiro de 1 byte, isso implica em cair na posição ocupada pelo 9. 2 bytes, na posição ocupada pelo 5. 4 bytes, na posição ocupada pelo 3. 8 bytes, na posição ocupada pelo 1. Dependendo da plataforma ser little endian ou big endian, não necessariamente acessaremos o byte com o número em si - pode ser um byte apenas com zeros também.",
            "correct": false,
            "text": "Será necessariamente 3"
        },
        {
            "id": "c5c24f72-9203-4c16-af85-ef063ae27ed6",
            "feedback": "Dependendo da plataforma, o tamanho do int poderia ser 1, 2, 4, 8, e assim por diante bytes. Char, por padrão, é 8 bits. Ao fazer casting do ponteiro para char e em seguida acessar a posição 4, estamos necessariamente pegando o quinto byte do vetor. Para um inteiro de 1 byte, isso implica em cair na posição ocupada pelo 9. 2 bytes, na posição ocupada pelo 5. 4 bytes, na posição ocupada pelo 3. 8 bytes, na posição ocupada pelo 1. Dependendo da plataforma ser little endian ou big endian, não necessariamente acessaremos o byte com o número em si - pode ser um byte apenas com zeros também.",
            "correct": false,
            "text": "Será necessariamente 0"
        },
        {
            "id": "ccbad720-4c94-4f2a-b6f9-f1bcdd3ed76f",
            "feedback": "Dependendo da plataforma, o tamanho do int poderia ser 1, 2, 4, 8, e assim por diante bytes. Char, por padrão, é 8 bits. Ao fazer casting do ponteiro para char e em seguida acessar a posição 4, estamos necessariamente pegando o quinto byte do vetor. Para um inteiro de 1 byte, isso implica em cair na posição ocupada pelo 9. 2 bytes, na posição ocupada pelo 5. 4 bytes, na posição ocupada pelo 3. 8 bytes, na posição ocupada pelo 1. Dependendo da plataforma ser little endian ou big endian, não necessariamente acessaremos o byte com o número em si - pode ser um byte apenas com zeros também.",
            "correct": true,
            "text": "Pode ser 1 ou 3"
        },
        {
            "id": "33ce63a5-7472-4b4e-aaf8-00fdd280582a",
            "feedback": "Dependendo da plataforma, o tamanho do int poderia ser 1, 2, 4, 8, e assim por diante bytes. Char, por padrão, é 8 bits. Ao fazer casting do ponteiro para char e em seguida acessar a posição 4, estamos necessariamente pegando o quinto byte do vetor. Para um inteiro de 1 byte, isso implica em cair na posição ocupada pelo 9. 2 bytes, na posição ocupada pelo 5. 4 bytes, na posição ocupada pelo 3. 8 bytes, na posição ocupada pelo 1. Dependendo da plataforma ser little endian ou big endian, não necessariamente acessaremos o byte com o número em si - pode ser um byte apenas com zeros também.",
            "correct": false,
            "text": "Pode ser 0, 3, 5, 7 ou 9"
        }
    ]
}