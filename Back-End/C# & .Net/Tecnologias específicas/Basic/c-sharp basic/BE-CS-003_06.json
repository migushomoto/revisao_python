{
  "SKU": "BE-CS-003",
  "interpreter": 1,
  "type": "MULT",
  "language": "csharp",
  "knowledgeArea": "C#",
  "category": "Programação Orientada a Objetos",
  "subCategory": "SOLID",
  "level": "Medium",
  "tagsOrConcepts": [
    "solid"
  ],
  "text": [
    "O princípio do aberto fechado define que:"
  ],
  "alternatives": [
    {
      "text": "Funções que usam ponteiros ou referências para classes base devem ser capazes de usar classes derivadas sem conhecê-las.",
      "feedback": "princípio da substituição de Liskov",
      "correct": false,
      "id": "f9347043-9e23-4382-8387-f1a456407da7"
    },
    {
      "text": "Classes não devem ser forçadas a depender de interfaces que não vão utilizar.",
      "feedback": "princípio da segregação de interfaces",
      "correct": false,
      "id": "9b661e77-917f-40b0-978c-362101afabbe"
    },
    {
      "text": "Classes devem ter somente uma responsabilidade",
      "feedback": "princípio da responsabilidade única",
      "correct": false,
      "id": "8309094a-9796-4e54-aa2e-29beafa44af7"
    },
    {
      "text": "Entidades de software (classes, módulos, funções etc.) devem estar abertas para extensão, mas fechadas para modificações.",
      "feedback": "Podemos alterar uma classe estendendo suas funcionalidades através de interfaces, herança e composição",
      "correct": true,
      "id": "1944c2cd-385d-443a-84ee-891f125640b1"
    }
  ],
  "id": "c31353d8-9593-486b-b5b0-7085233aef12"
}