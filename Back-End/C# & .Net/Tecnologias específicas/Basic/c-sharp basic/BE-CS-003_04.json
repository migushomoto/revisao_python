{
  "SKU": "BE-CS-003",
  "interpreter": 1,
  "type": "MULT",
  "language": "csharp",
  "knowledgeArea": "C#",
  "category": "Programação Orientada a Objetos",
  "subCategory": "Reflection",
  "level": "Medium",
  "tagsOrConcepts": [
    "reflection"
  ],
  "text": [
    "Usando Reflection podemos inspecionar o código em tempo de execução (runtime) e realizar tarefas como:"
  ],
  "alternatives": [
    {
      "text": "Permitir que possamos aplicar abstrações em nosso código",
      "feedback": "Conseguimos isso utilizando classes abstratas",
      "correct": false,
      "id": "fa8559df-55d0-4499-a275-e26dd5d69806"
    },
    {
      "text": "Obter metadados de propriedades e métodos",
      "feedback": "Apenas com reflection conseguimos realizar esse tipo de tarefa",
      "correct": true,
      "id": "d7c2c3b5-1407-4df2-b753-fb81930242fd"
    },
    {
      "text": "Criar contratos que definem quais métodos, propriedades, eventos ou indexadores devem ser implementados nas classes",
      "feedback": "Essa funcionalidade só conseguimos utilizando interfaces",
      "correct": false,
      "id": "c79d0cf6-fd50-475b-8a10-c4f792ff5ae8"
    },
    {
      "text": "Conseguir escrever códigos reutilizáveis com bom desempenho e tipagem segura",
      "feedback": "Essa é uma característica do uso de generics",
      "correct": false,
      "id": "d72e4369-7948-42eb-aac6-287f672727fa"
    }
  ],
  "id": "ab32b543-3fd3-4828-aa95-5b1b157db9e7"
}